plugins {
    id("idea")
    id("java-library")
    id("net.neoforged.gradle.userdev") version "7.0.192"
}

tasks.wrapper {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

version = project.property("mod_version")!!
group = project.property("mod_group_id")!!

base {
    archivesName = project.property("mod_id") as String
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// Include resources generated by data generators.
sourceSets.main.get().resources {
    srcDir("src/generated/resources")
}

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.get().extendsFrom(localRuntime.get())
}

tasks.jar {
    from("../LICENSE")
}

dependencies {
    implementation("net.neoforged:neoforge:${project.property("neo_version")}")
}

tasks.processResources {
    val replaceProperties: Map<String, Any?> = mapOf(
            "minecraft_version" to project.property("minecraft_version"),
            "minecraft_version_range" to project.property("minecraft_version_range"),
            "loader_version_range" to project.property("loader_version_range"),
            "mod_id" to project.property("mod_id"),
            "mod_name" to project.property("mod_name"),
            "mod_license" to project.property("mod_license"),
            "mod_version" to project.property("mod_version"),
            "mod_authors" to project.property("mod_authors"),
            "mod_description" to project.property("mod_description")
    )
    replaceProperties.forEach(inputs::property)

    filesMatching("META-INF/neoforge.mods.toml") {
        expand(replaceProperties)
    }
}

// Include resources generated by data generators.
sourceSets.main.get().resources {
    srcDir("src/generated/resources")
}


tasks.withType<JavaCompile>().configureEach {
    options.encoding = "UTF-8" // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        isDownloadSources = true
        isDownloadJavadoc = true
    }
}
